<?xml version="1.0" encoding="UTF-8"?>

<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <!-- 定义了WEB应用的名字 -->
    <display-name>yuesheng-hotel-supplies</display-name>
    <!-- 声明WEB应用的描述信息 -->
    <description>月升宾馆酒店用品</description>

    <!-- 静态资源访问 -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/resources/*</url-pattern>
    </servlet-mapping>

    <!-- 在向servlet或JSP页面制定初始化参数或定制URL时，必须首先命名servlet或JSP页面。Servlet元素就是用来完成此项任务的。 -->
    <servlet>
        <servlet-name>mvc-dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>    <!-- doService() -->
        <!-- 当值为0或者大于0时，表示容器在应用启动时就加载并初始化这个servlet；
        当值小于0或者没有指定时，则表示容器在该servlet被选择时才会去加载。
        正数的值越小，该servlet的优先级越高，应用启动时就越先加载。
        当值相同时，容器就会自己选择顺序来加载。-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:spring/springMVC.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>mvc-dispatcher</servlet-name>
        <!-- 用于拦截请求（url-pattern为 / ，说明拦截所有请求） -->
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <!-- 为了能够处理中文的post请求，再配置一个encodingFilter，以避免post请求中文出现乱码情况 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- html中form表单只支持GET与POST请求，而DELETE、PUT等method并不支持，spring3添加了
    一个过滤器，可以将这些请求转换为标准的http方法，使得支持GET、POST、PUT与DELETE请求。
    Post提交 <input type="hidden" name="_method" value="put" /> -->
    <filter>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
        <init-param>
            <param-name>methodParam</param-name>
            <param-value>_method_</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>HiddenHttpMethodFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- OpenSessionInViewFilter的主要功能是用来把一个Hibernate Session和一次完整的请求过程对应的线程相绑定。
    目的是为了实现"Open Session in View"的模式。例如： 它允许在事务提交之后延迟加载显示所需要的对象。
 OpenSessionInViewFilter 过滤器将 Hibernate Session 绑定到请求线程中，它将自动被 Spring 的事务管理器探测到。
 所以 OpenSessionInViewFilter 适用于 Service 层使用HibernateTransactionManager 或
 JtaTransactionManager 进行事务管理的环境，也可以用于非事务只读的数据操作中。-->
    <filter>
        <filter-name>openSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
        <init-param>
            <param-name>flushMode</param-name>
            <param-value>AUTO</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>openSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    
    <!-- ContextLoaderListener的作用就是启动Web容器时，自动装配ApplicationContext的配置信息
    。因为它实现了ServletContextListener这个接口，在web.xml配置这个监听器，启动容器时，
    就会默认执行它实现的方法。spring中的所有bean都由这个类来创建
     ContextLoaderListener.getCurrentWebApplicationContext().getBean("**")可以访问某个bean-->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- 解决由于Struts或者quartz引起的内存泄露问题 -->
    <listener>
        <listener-class>
            org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>

    <!-- 配置log4j -->
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
    
    <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>hotelsupplies.root</param-value>
    </context-param>
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:config/log4j.properties</param-value>
    </context-param>
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>3000</param-value>
    </context-param>

    <!-- getServletContext().getInitParam() -->
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <!-- classpath：只会到你指定的class路径中查找找文件;
        classpath*：不仅包含class路径，还包括jar文件中(class路径)进行查找.-->
        <param-value>classpath:spring/applicationContext.xml</param-value>
    </context-param>

    <filter>
        <filter-name>login</filter-name>
        <filter-class>com.benjamin.common.filter.LoginFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>login</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- session超时定义,单位为分钟 -->
    <session-config>
        <session-timeout>200</session-timeout>
    </session-config>

    <!-- 出错页面定义 -->
    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/WEB-INF/pages/error/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>500</error-code>
        <location>/WEB-INF/pages/error/500.jsp</location>
    </error-page>
    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/pages/error/404.jsp</location>
    </error-page>
    <error-page>
        <error-code>403</error-code>
        <location>/WEB-INF/pages/error/403.jsp</location>
    </error-page>
</web-app>
